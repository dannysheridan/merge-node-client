/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as Merge from "../../../../api";
import * as core from "../../../../core";

export const ConditionSchema: core.serialization.ObjectSchema<
    serializers.ats.ConditionSchema.Raw,
    Merge.ats.ConditionSchema
> = core.serialization.object({
    id: core.serialization.string(),
    commonModel: core.serialization.property("common_model", core.serialization.string().optional()),
    nativeName: core.serialization.property("native_name", core.serialization.string().optional()),
    fieldName: core.serialization.property("field_name", core.serialization.string().optional()),
    isUnique: core.serialization.property("is_unique", core.serialization.boolean().optional()),
    conditionType: core.serialization.property(
        "condition_type",
        core.serialization.lazy(async () => (await import("../../..")).ats.ConditionSchemaConditionType)
    ),
    operators: core.serialization.list(
        core.serialization.lazyObject(async () => (await import("../../..")).ats.OperatorSchema)
    ),
});

export declare namespace ConditionSchema {
    interface Raw {
        id: string;
        common_model?: string | null;
        native_name?: string | null;
        field_name?: string | null;
        is_unique?: boolean | null;
        condition_type: serializers.ats.ConditionSchemaConditionType.Raw;
        operators: serializers.ats.OperatorSchema.Raw[];
    }
}
