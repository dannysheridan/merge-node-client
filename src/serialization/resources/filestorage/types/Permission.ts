/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as Merge from "../../../../api";
import * as core from "../../../../core";

export const Permission: core.serialization.ObjectSchema<
    serializers.filestorage.Permission.Raw,
    Merge.filestorage.Permission
> = core.serialization.object({
    id: core.serialization.string().optional(),
    remoteId: core.serialization.property("remote_id", core.serialization.string().optional()),
    user: core.serialization.string().optional(),
    group: core.serialization.string().optional(),
    type: core.serialization.lazy(async () => (await import("../../..")).filestorage.TypeEnum).optional(),
    roles: core.serialization
        .list(core.serialization.lazy(async () => (await import("../../..")).filestorage.RolesEnum).optional())
        .optional(),
    modifiedAt: core.serialization.property("modified_at", core.serialization.date().optional()),
});

export declare namespace Permission {
    interface Raw {
        id?: string | null;
        remote_id?: string | null;
        user?: string | null;
        group?: string | null;
        type?: serializers.filestorage.TypeEnum.Raw | null;
        roles?: (serializers.filestorage.RolesEnum.Raw | null | undefined)[] | null;
        modified_at?: string | null;
    }
}
