/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as Merge from "../../../../api";
import * as core from "../../../../core";

export const MetaResponse: core.serialization.ObjectSchema<
    serializers.ticketing.MetaResponse.Raw,
    Merge.ticketing.MetaResponse
> = core.serialization.object({
    requestSchema: core.serialization.property(
        "request_schema",
        core.serialization.record(core.serialization.string(), core.serialization.unknown())
    ),
    remoteFieldClasses: core.serialization.property(
        "remote_field_classes",
        core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()
    ),
    status: core.serialization
        .lazyObject(async () => (await import("../../..")).ticketing.LinkedAccountStatus)
        .optional(),
    hasConditionalParams: core.serialization.property("has_conditional_params", core.serialization.boolean()),
    hasRequiredLinkedAccountParams: core.serialization.property(
        "has_required_linked_account_params",
        core.serialization.boolean()
    ),
});

export declare namespace MetaResponse {
    interface Raw {
        request_schema: Record<string, unknown>;
        remote_field_classes?: Record<string, unknown> | null;
        status?: serializers.ticketing.LinkedAccountStatus.Raw | null;
        has_conditional_params: boolean;
        has_required_linked_account_params: boolean;
    }
}
