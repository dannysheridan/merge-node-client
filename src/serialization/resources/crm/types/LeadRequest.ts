/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as Merge from "../../../../api";
import * as core from "../../../../core";

export const LeadRequest: core.serialization.ObjectSchema<serializers.crm.LeadRequest.Raw, Merge.crm.LeadRequest> =
    core.serialization.object({
        owner: core.serialization.lazy(async () => (await import("../../..")).crm.LeadRequestOwner).optional(),
        leadSource: core.serialization.property("lead_source", core.serialization.string().optional()),
        title: core.serialization.string().optional(),
        company: core.serialization.string().optional(),
        firstName: core.serialization.property("first_name", core.serialization.string().optional()),
        lastName: core.serialization.property("last_name", core.serialization.string().optional()),
        addresses: core.serialization
            .list(core.serialization.lazyObject(async () => (await import("../../..")).crm.AddressRequest))
            .optional(),
        emailAddresses: core.serialization.property(
            "email_addresses",
            core.serialization
                .list(core.serialization.lazyObject(async () => (await import("../../..")).crm.EmailAddressRequest))
                .optional()
        ),
        phoneNumbers: core.serialization.property(
            "phone_numbers",
            core.serialization
                .list(core.serialization.lazyObject(async () => (await import("../../..")).crm.PhoneNumberRequest))
                .optional()
        ),
        convertedDate: core.serialization.property("converted_date", core.serialization.date().optional()),
        convertedContact: core.serialization.property(
            "converted_contact",
            core.serialization.lazy(async () => (await import("../../..")).crm.LeadRequestConvertedContact).optional()
        ),
        convertedAccount: core.serialization.property(
            "converted_account",
            core.serialization.lazy(async () => (await import("../../..")).crm.LeadRequestConvertedAccount).optional()
        ),
        integrationParams: core.serialization.property(
            "integration_params",
            core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()
        ),
        linkedAccountParams: core.serialization.property(
            "linked_account_params",
            core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()
        ),
        remoteFields: core.serialization.property(
            "remote_fields",
            core.serialization
                .list(core.serialization.lazyObject(async () => (await import("../../..")).crm.RemoteFieldRequest))
                .optional()
        ),
    });

export declare namespace LeadRequest {
    interface Raw {
        owner?: serializers.crm.LeadRequestOwner.Raw | null;
        lead_source?: string | null;
        title?: string | null;
        company?: string | null;
        first_name?: string | null;
        last_name?: string | null;
        addresses?: serializers.crm.AddressRequest.Raw[] | null;
        email_addresses?: serializers.crm.EmailAddressRequest.Raw[] | null;
        phone_numbers?: serializers.crm.PhoneNumberRequest.Raw[] | null;
        converted_date?: string | null;
        converted_contact?: serializers.crm.LeadRequestConvertedContact.Raw | null;
        converted_account?: serializers.crm.LeadRequestConvertedAccount.Raw | null;
        integration_params?: Record<string, unknown> | null;
        linked_account_params?: Record<string, unknown> | null;
        remote_fields?: serializers.crm.RemoteFieldRequest.Raw[] | null;
    }
}
